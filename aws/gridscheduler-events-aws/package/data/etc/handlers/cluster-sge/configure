#!/bin/bash
################################################################################
##
## Alces Clusterware - Handler hook
## Copyright (C) 2015-2016 Stephen F. Norledge and Alces Software Ltd.
##
################################################################################
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.vars.sh ]; then
            source "${a}"/clusterware/config.vars.sh
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_configure_gridscheduler() {
    echo "Configuring GridScheduler"
    handler_add_libdir "${cw_ROOT}"/var/lib/scheduler
    require gridscheduler
    if [[ "${cw_INSTANCE_tag_SCHEDULER_ROLES}" == *":master:"* ]]; then
        echo "Instance is GridScheduler qmaster"
        files_load_config --optional scheduler config/cluster
        if [ "${cw_SCHEDULER_allocation}" ]; then
            if [ "${cw_SCHEDULER_allocation}" == "autodetect" ]; then
                echo "Detecting initial allocation strategy"
                # Autodetction works by determining if we're autoscaling
                # or static.  If we're static, we'll default to spanning,
                # and if we're autoscaling we'll default to packing.
                # If we don't know we'll default to packing.
                cw_SCHEDULER_allocation=packing
                if files_load_config --optional instance-aws config/cluster; then
                    case "${cw_INSTANCE_aws_autoscaling}" in
                        disabled)
                            echo "Detected cluster configured without autoscaling; using 'spanning'"
                            cw_SCHEDULER_allocation=spanning
                            ;;
                        enabled)
                            echo "Detected cluster configured for autoscaling; using 'packing'"
                            cw_SCHEDULER_allocation=packing
                            ;;
                    esac
                fi
            fi
            echo "Setting initial allocation strategy to: ${cw_SCHEDULER_allocation}"
            gridscheduler_set_allocation_strategy "${cw_SCHEDULER_allocation}"
        fi
        if [ "${cw_SCHEDULER_submission}" ]; then
            echo "Setting initial submission strategy to: ${cw_SCHEDULER_submission}"
            gridscheduler_set_submission_strategy "${cw_SCHEDULER_submission}"
        fi
    fi
    if [[ "${cw_INSTANCE_tag_SCHEDULER_ROLES}" == *":compute:"* ]]; then
        echo "Instance is GridScheduler exec host"
        gridscheduler_write_node_resources "${cw_ROOT}/etc/serf/tags-node-resources.json"

        require distro
        distro_restart_service clusterware-serf
    fi
}

main() {
    # Bail out if we're already configured (this is a reboot)
    if [ -d "${cw_ROOT}/etc/config/cluster-sge" ]; then
        exit 0
    fi

    mkdir -p "${cw_ROOT}/etc/config/cluster-sge"

    files_load_config instance config/cluster

    _configure_gridscheduler
}

setup
require handler
require files

handler_tee main "$@"
