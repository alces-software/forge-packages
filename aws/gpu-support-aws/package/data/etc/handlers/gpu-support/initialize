#!/bin/bash
#==============================================================================
# Copyright (C) 2007-2018 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Alces Clusterware.
#
# Alces Clusterware is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Alces Clusterware is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Alces Clusterware, please visit:
# https://github.com/alces-software/clusterware
#==============================================================================
setup() {
    local a xdg_config
    IFS=: read -a xdg_config <<< "${XDG_CONFIG_HOME:-$HOME/.config}:${XDG_CONFIG_DIRS:-/etc/xdg}"
    for a in "${xdg_config[@]}"; do
        if [ -e "${a}"/clusterware/config.rc ]; then
            source "${a}"/clusterware/config.rc
            break
        fi
    done
    if [ -z "${cw_ROOT}" ]; then
        echo "$0: unable to locate clusterware configuration"
        exit 1
    fi
    kernel_load
}

_fetch_installer() {
    local dir s3_host
    dir="$1"
    eval $(network_fetch_ec2_document | ${_JQ} -r '"_REGION=\(.region)"')
    if [ "${_REGION}" == "us-east-1" ]; then
        s3_host="s3.amazonaws.com"
    else
        s3_host="s3-${_REGION}.amazonaws.com"
    fi
    if curl -L -o ${dir}/${_INSTALLER} \
            https://${s3_host}/alces-flight-profiles-${_REGION}/share/${_INSTALLER} \
            2>&1 | log_blob "${_LOG}" "fetch"; then
        chmod 0700 ${dir}/${_INSTALLER}
    else
        return 1
    fi
}

_install_driver() {
    local install_logfile installer
    installer="$1/${_INSTALLER}"
    if distro_is el6; then
        yum install -y -e0 http://mirror.centos.org/centos/6/updates/x86_64/Packages/kernel-devel-$(uname -r).rpm
    else
      yum install -y -e0 http://mirror.centos.org/centos/7/updates/x86_64/Packages/kernel-devel-$(uname -r).rpm
    fi
    if [ -x "${installer}" ]; then
        install_logfile="$(dirname "${_LOG}")"/nvidia-driver-install-$(date +"%Y%m%d-%H%M%S").log
        log "Installing nvidia driver (installation log: ${install_logfile})" "${_LOG}"
        if ! "${installer}" --kernel-name=$(uname -r) \
            --no-network --silent --disable-nouveau \
            --log-file-name="${install_logfile}" 2>&1 | log_blob "${_LOG}" "install-driver"; then
            log "Driver installation failed" "${_LOG}"
            return 1
        fi
    else
        log "Could not find installer: ${installer}" "${_LOG}"
        return 1
    fi
}

_gpu_count() {
  local nvdevs n3d nvga
  # Count the number of NVIDIA controllers found.
  nvdevs=$(lspci | grep -i NVIDIA)
  n3d=$(echo "$nvdevs" | grep "3D controller" | wc -l)
  nvga=$(echo "$nvdevs" | grep "VGA compatible controller" | wc -l)

  echo $(($n3d+$nvga))
}

main() {
    local gpu_count n i dir
    set -o pipefail

    gpu_count="$(_gpu_count)"
    if [ "${gpu_count}" == "0" ]; then
        log "No GPUs detected; skipping GPU support" "${_LOG}"
        return 0
    fi

    log "Preserving distro GL libraries"
    mkdir -p "${cw_ROOT}"/var/lib/sessions/lib
    cp -av /usr/lib64/libGL.so.* /usr/lib64/libEGL.so.* "${cw_ROOT}"/var/lib/sessions/lib

    log "Checking for existence of nvidia driver" "${_LOG}"
    if ! modinfo nvidia 2>&1 | log_blob "${_LOG}" "modinfo"; then
        log "Driver not found - fetching installer" "${_LOG}"
        dir="$(mktemp -d /tmp/clusterware-profiles.nvidia.XXXXXXXX)"
        _fetch_installer "${dir}" || res=1
        log "Executing installer" "${_LOG}"
        _install_driver "${dir}" || res=1
        rm -rf "${dir}"
        if [ "$res" ]; then
            return $res
        fi
    fi
    log "Loading nvidia driver" "${_LOG}"
    if modprobe nvidia 2>&1 | log_blob "${_LOG}" "modprobe"; then
        n=$(($gpu_count-1))
        for i in $(seq 0 $n); do
          if [ -c /dev/nvidia$i ]; then
              log "Already exists: /dev/nvidia$i" "${_LOG}"
          elif ! mknod -m 666 /dev/nvidia$i c 195 $i; then
              log "Failed to create /dev/nvidia$i" "${_LOG}"
          else
            log "Created /dev/nvidia$i" "${_LOG}"
          fi
        done
        if [ -c /dev/nvidiactl ]; then
            log "Already exists: /dev/nvidiactl" "${_LOG}"
        elif  ! mknod -m 666 /dev/nvidiactl c 195 255; then
            log "Failed to create /dev/nvidiactl" "${_LOG}"
        else
          log "Created /dev/nvidiactl" "${_LOG}"
        fi
    else
        log "Unable to load nvidia driver" "${_LOG}"
        return 1
    fi
}

setup
require log
require distro
require network

_JQ="${cw_ROOT}"/opt/jq/bin/jq
_LOG=/var/log/clusterware/gpu-support.log
_VERSION=384.98
_INSTALLER=NVIDIA-Linux-x86_64-${_VERSION}.run

if distro_is el6 || distro_is el7; then
    main "$@"
else
    echo "$0: unfortunately distro '${cw_DIST}' is not unsupported"
    exit 1
fi
