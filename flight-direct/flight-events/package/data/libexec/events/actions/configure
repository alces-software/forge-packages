#!/bin/bash
#==============================================================================
# Copyright (C) 2018 Stephen F. Norledge and Alces Software Ltd.
#
# This file/package is part of Flight Direct.
#
# Flight Direct is free software: you can redistribute it and/or
# modify it under the terms of the GNU Affero General Public License
# as published by the Free Software Foundation, either version 3 of
# the License, or (at your option) any later version.
#
# Flight Direct is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this package.  If not, see <http://www.gnu.org/licenses/>.
#
# For more information on the Flight Direct, please visit:
# https://github.com/alces-software/flight-direct
#==============================================================================
_write() {
    local key val
    key="$1"
    val="$2"
    ruby_run <<RUBY
require 'json'

config = begin
  JSON.load(File.read('${cw_ROOT}/etc/serf/config.json'))
rescue
  require 'digest/md5'
  {
    'rpc_auth' => Digest::MD5.hexdigest("$FL_CONFIG_CLUSTERNAME"),
    'tags' => { 'role' => "$FL_CONFIG_ROLE" }
  }
end

ops = []
ops << lambda do
  File.write("${cw_ROOT}/etc/serf/config.json",
             config.to_json,
             perm: 0600)
end

case "${key}"
when 'master_ip'
  config['retry_join'] = ["${val}"] unless "${val}".empty?
when 'role'
  (config['tags'] ||= {})['role'] = "$val"
when 'auth'
  config['rpc_auth'] = "${val}"
  ops << lambda do
    require 'fileutils'
    FileUtils.mkdir_p("${cw_ROOT}/etc/config/cluster")
    File.write("${cw_ROOT}/etc/config/cluster/auth.rc",
               "cw_CLUSTER_auth_token=${val}",
               perm: 0600)
  end
end

ops.each(&:call)
RUBY
}

_read() {
    local key
    key="$1"
    ruby_run <<RUBY
require 'json'
require 'digest/md5'

config = JSON.load(File.read('${cw_ROOT}/etc/serf/config.json')) rescue {
  'retry_join' => "$FL_CONFIG_ROLE" == "login" ? [] : ["${FL_CONFIG_MASTERIP:-10.10.0.1}"],
  'rpc_auth' => Digest::MD5.hexdigest("$FL_CONFIG_CLUSTERNAME"),
  'tags' => { 'role' => "$FL_CONFIG_ROLE" }
}

case "${key}"
when 'master_ip'
  puts config['retry_join']&.first
when 'auth'
  puts config['rpc_auth']
when 'role'
  puts (config['tags'] ||= {})['role']
end
RUBY
}

_set() {
    local val rc name key
    name="$1"
    key="$2"
    val=$(
	whiptail --title " ${cw_BINNAME}: Configure $name " \
	    --inputbox "$name" 8 78 "$(_read $key)" \
	    3>&1 1>&2 2>&3
    )
    rc=$?
    if [ $rc == 0 ]; then
	_write "$key" $val
    fi
}

main() {
    local choice
    while true; do
	choice=$(
	    whiptail --title " ${cw_BINNAME}: Configuration " \
		--menu "Choose an option" 25 78 16 \
		"Authentication" "Set authentication secret" \
		"Master IP" "Set IP address of cluster ring master node" \
		"Role" "Role of this cluster node" \
		"Quit" "Quit configuration" \
		3>&1 1>&2 2>&3
	)
	case "${choice}" in
	    "Authentication")
		_set "Authentication" "auth"
		;;
	    "Master IP")
		_set "Master IP" "master_ip"
		;;
	    "Role")
		_set "Role" "role"
		;;
	    *)
		break
		;;
	esac
    done
}

t1=brightblue
t2=green
NEWT_COLORS="root=,$t1:checkbox=,$t1:entry=,$t1:label=$t1,:actlistbox=,$t1:helpline=,$t1:roottext=,$t1:emptyscale=$t1:disabledentry=$t1,:button=white,$t2:title=white,blue:actsellistbox=white,$t2"

require ruby

main "$@"
